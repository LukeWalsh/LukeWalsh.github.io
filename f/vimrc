" Enable fancy vim specific goodies 
set nocompatible

" Set cursor to line location at last close
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
      \| exe "normal! g'\"" | endif
endif

" Easy jumping far left and far right
map H ^
map L $

" Get some nice colors
syntax on
colorscheme torte 

" Indentation help, and highlight matching for braces, parenththesis, etc. 
set autoindent
set smartindent
set showmatch

" Tabs are 4 spaces, insert spaces instead of tabs
set tabstop=4
set shiftwidth=4
set expandtab

" Allow us to backspace things that were not added in this insert
set backspace=indent,eol,start

" Display number lines on the left hand side
set number

" When the cursor gets 3 lines from the top/bottom,
" bring in 5 more lines in that direction
set scrolljump=5
set scrolloff=3

" Don't highlight matching words when searching
set nohlsearch

" Use tab for both autocompletion and indention
function InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunc

inoremap <tab> <c-r>=InsertTabWrapper()<cr>

" Use absolute numbers in insert mode, and relative otherwise
autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber

" Use ctrl + n to toggle line numbers between absolute and relative
" in case for some reason we want to change them
function! NumberToggle()
    if(&relativenumber == 1)
        set number
    else
        set relativenumber
    endif
endfunc

nnoremap <C-n> :call NumberToggle()<cr>
